#!/usr/bin/env python3
# coding: utf-8

import csv
import sys
import signal

#Define var
NAME        = 0
DURATION    = 1
NEED        = 2
START       = 3
END         = 4
FLOAT       = 5
#Define var END

def find_all_paths(graph, start, end, path=[]):
    path = path + [start]
    if start == end:
        return [path]
    if start not in graph:
        return []
    paths = []
    for node in graph[start][NEED]:
        if node not in path:
            newpaths = find_all_paths(graph, node, end, path)
            for newpath in newpaths:
                paths.append(newpath)
    return paths

def get_length(my_graph, path):
    length = 0
    for task in path[1:]:
        length += my_graph[task][DURATION]
    return length

def get_start(my_root, my_graph, task):
    length = 0
    paths = []
    for key in my_root:
        tmp = find_all_paths(my_graph, task, key)
        if tmp: paths += tmp
    for path in paths:
        tmp = get_length(my_graph, path)
        if tmp > length: length = tmp
    return length

def set_float(my_graph, project_duration):
    for task in my_graph:
        next_time = project_duration
        for ID in my_graph:
            if task in my_graph[ID][NEED] and next_time > my_graph[ID][START]:
                next_time = my_graph[ID][START]
        my_graph[task][FLOAT] = next_time - my_graph[task][END]

def set_tab(my_root, my_graph):
    project_duration = 0
    for ID in my_graph:
        my_graph[ID][START] = get_start(my_root, my_graph, ID)
        my_graph[ID][END] = my_graph[ID][START] + my_graph[ID][DURATION]
        if my_graph[ID][END] > project_duration: project_duration = my_graph[ID][END]
    set_float(my_graph, project_duration)

def print_gantt(my_graph):
    #Sorting
    my_list = []
    for ID in my_graph:
        my_list.append([ID, my_graph[ID][START], my_graph[ID][FLOAT]])
    my_list = sorted(my_list, key=lambda elem: (elem[1], elem[2]))
    #printing work duration
    print("durée totale des travaux :", my_graph[my_list[-1][0]][END],"semaines")
    #Printing gantt txt
    print()
    for elem in my_list:
        ID = elem[0]
        if my_graph[ID][FLOAT] > 0:
            print(ID,"doit débuter entre","t="+str(my_graph[ID][START]),"et","t="+str(my_graph[ID][START] + my_graph[ID][FLOAT]))
        else:
            print(ID,"doit débuter à","t="+str(my_graph[ID][START]))
    #printing gant txt schema
    print()
    for elem in my_list:
        ID = elem[0] 
        print(ID,"\t","("+str(my_graph[ID][FLOAT])+")","\t"+str(" "*my_graph[ID][START])+str("="*my_graph[ID][DURATION]))



#Main script start
if (len(sys.argv) != 2):
    exit(84)
try:
    with open(sys.argv[1], newline='') as csvfile:
        timetable = csv.reader(csvfile, delimiter=';')
        my_graph = {}
        my_root = []
        for line in timetable:
            container = []
            if len(line) < 4:
                my_root.append(line[0])
            container.append(line[1])
            try:
                container.append(int(line[2]))
            except:
                sys.stderr.write("String found instead of numbers !\n")
                exit(84)
            container.append(line[3:])
            container.extend((0,0,0))
            if line[0] in my_graph:
                sys.stderr.write("Same ID found for 2 different item !\n")
                exit(84)
            my_graph[line[0]] = container
except:
    sys.stderr.write("Could not parse file !\n")
    exit(84)

set_tab(my_root,my_graph)
print_gantt(my_graph)
#Main script end