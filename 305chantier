#!/usr/bin/env python3
# coding: utf-8

import csv
import sys

#Define var
NAME        = 0
DURATION    = 1
NEED        = 2
START       = 3
END         = 4
FLOAT       = 5
#Define var END

def find_all_paths(graph, start, end, path=[]):
    path = path + [start]
    if start == end:
        return [path]
    if start not in graph:
        return []
    paths = []
    for node in graph[start][NEED]:
        if node not in path:
            newpaths = find_all_paths(graph, node, end, path)
            for newpath in newpaths:
                paths.append(newpath)
    return paths

def get_length(my_graph, path):
    length = 0
    for task in path[1:]:
        length += my_graph[task][DURATION]
    return length

def get_start(my_root, my_graph, task):
    length = 0
    paths = []
    for key in my_root:
        tmp = find_all_paths(my_graph, task, key)
        if tmp: paths += tmp
    for path in paths:
        tmp = get_length(my_graph, path)
        if tmp > length: length = tmp
    return length

def set_tab(my_root, my_graph):
    project_duration = 0
    for ID in my_graph:
        my_graph[ID][START] = get_start(my_root, my_graph, ID)
        my_graph[ID][END] = my_graph[ID][START] + my_graph[ID][DURATION]
        if my_graph[ID][END] > project_duration: project_duration = my_graph[ID][END]
    return project_duration

#Main script start
try:
    with open(sys.argv[1], newline='') as csvfile:
        timetable = csv.reader(csvfile, delimiter=';')
        my_graph = {}
        my_root = []
        for line in timetable:
            container = []
            if len(line) < 4:
                my_root.append(line[0])
            container.append(line[1])
            try:
                container.append(int(line[2]))
            except:
                exit(84)
            container.append(line[3:])
            container.append(0)
            container.append(0)
            container.append(0)
            my_graph[line[0]] = container
except:
    exit(84)

print("durÃ©e totale des travaux :", set_tab(my_root,my_graph),"semaines")

for ID in my_graph:
    print(ID, my_graph[ID])

# tuple_l = []
# for ID in my_graph:
#     tuple_l.append((ID, my_graph[ID][END]))

# print(sorted(tuple_l, key=lambda elem: (elem[1], elem[0])))


#Main script end